// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  TRAINER
}

model User {
  id       Int       @id @default(autoincrement())
  name     String
  username String
  email    String    @unique
  phone    String    @unique
  age      String
  sex      String
  password String
  image    String
  role     Role?     @default(USER)
  bookings Booking[]
  Workout  Workout[]
  Cart     Cart[]
  Resume   Resume[]
}

model Resume {
  id         Int           @id @default(autoincrement())
  userId     Int
  resumefile String
  status     Trainerstatus @default(Waiting_for_approval)
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum Trainerstatus {
  Approve
  Waiting_for_approval
  Not_approved
}

model Workout {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  img         String
  advice      String
  workoutType String
  WorkoutDate DateTime
}

model Product {
  id        Int         @id @default(autoincrement())
  name      String
  detailed  String
  image     String
  price     Int
  CartItems CartItems[]
}

model Cart {
  id         Int         @id @default(autoincrement())
  userId     Int
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cartStatus CartStatus  @default(Pending)
  CartItems  CartItems[]
}

model CartItems {
  id        Int     @id @default(autoincrement())
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cartId    Int
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum CartStatus {
  Pending
  Inpayment
}

enum Status {
  Pending
  Confirmed
  Cancel
  FullyBooked
}

model Booking {
  id              Int      @id @default(autoincrement())
  name            String
  age             String
  sex             String
  phone           String
  userId          Int
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  // Trainer         Trainer  @relation(fields: [TrainertId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  bookingDateTime DateTime
  status          Status
  bookingDate     DateTime // New attribute for the booking date
  expiryDate      DateTime // New attribute for the expiry date of the booking
}
